const express = require('express');
const app = express();
const port = 8080;
const { Pool } = require('pg');

app.use(express.json());

app.listen(port, () => {
  console.log(`server endpoint made ${port}.`);
});

const client = new Pool ({
  user: 'postgres',
  host: '52.3.175.99',            //'localhost',
  database: 'postgres',
  password: 'password',
  port: 5432,
});

client.connect(err => {
  if (err) {
    console.error('connection error', err.stack)
  } else {
    console.log('connected')
  }
})



const getCacheReviews = {};
const getCacheMeta = {};



updateCache = () => {
  console.log('reset caches');
  const getCacheReviews = {};
  const getCacheMeta = {};
}

setInterval(updateCache, 20000);
//app.use('/', express.static(__dirname + '/../frontend/dist'));
app.use(express.json());

app.get('/reviews', (req, res) => {
let count = req.query.count || 5;
  console.log('herer');
  const reviewsQuery = `SELECT * FROM reviews r WHERE product_id = ${req.query.product_id} LIMIT ${count}`;
  const argsString = JSON.stringify(reviewsQuery);
  if (getCacheReviews[argsString]) {
    console.log('Cache used!!');
    res.send(getCacheReviews[argsString]) ;
  } else {
  
  let page = req.query.page || 1;

  let returnObject = { "product": req.query.product_id, "page": page , "count": count,"results": []};
  client.query(reviewsQuery, (err, result) => {
    if (err) throw err
    returnObject.results = result.rows;
    result.rows.forEach( (oneReview) => {
      oneReview.review_id = oneReview.id;
      delete oneReview.id;
      delete oneReview.product_id;
      delete oneReview.reviewer_email;
      oneReview.response = oneReview.response === 'null' ? null : oneReview.response;
      oneReview.photos = [];
      photosQuery = `SELECT * FROM photos p WHERE review_id = ${oneReview.review_id}`;
      client.query(photosQuery, (err, result) => {
        console.log(oneReview.review_id)
        oneReview.photos = result? result.rows : [];
        if (oneReview.photos) {
        }
    })
    })
    if (Object.keys(getCacheReviews).length < 1000) {
      getCacheReviews[argsString] = returnObject;
    };
    res.send(returnObject);
  });
}
});



app.get('/reviews/meta', (req, res) => {
  let reviewsQuery = `
  SELECT json_build_object(
    'product_id', r.product_id,
    'ratings', json_build_object(
      '5',(select count(*) from reviews r where rating = 5 and product_id = $1 ),
      '4',(select count(*) from reviews r where rating = 4 and product_id = $1),
      '3',(select count(*) from reviews r where rating = 3 and product_id = $1),
      '2',(select count(*) from reviews r where rating = 2 and product_id = $1 ),
      '1',(select count(*) from reviews r where rating = 1 and product_id = $1)),
    'recommended', json_build_object(
      '0', (select count(*) from reviews r where recommend = false and product_id = $1 ),
      '1', (select count(*) from reviews r where recommend = true  and product_id = $1 )),
    'characteristics',
    --swap for table
        (select jsonb_object_agg(name, (select json_build_object(
          'value',(select avg(value_of_char)from characteristic c left join characteristic_reviews cr on cr.characteristic_id = c.characteristic_id where c. product_id = $1 GROUP BY c.characteristic_id limit 1),
          'id',(select c.characteristic_id from characteristic c left join characteristic_reviews cr on cr.characteristic_id = c.characteristic_id where c. product_id = $1 GROUP BY c.characteristic_id limit 1))))
    from characteristic c left join characteristic_reviews cr on cr.characteristic_id=c.characteristic_id where c.product_id = $1))
    from reviews r left JOIN characteristic c on r.product_id = c.product_id where r.product_id=$1 group by r.product_id;`;
    const argsString = JSON.stringify(reviewsQuery);
    if (getCacheMeta[argsString]) {
      console.log('Cache used!!');
      res.send(getCacheMeta[argsString]) ;
    } else {
  client.query(reviewsQuery, [req.query.product_id], (err, result) => {
    if (err) {console.log(err)};
    if (Object.keys(getCacheReviews).length < 1000) {
      getCacheMeta[argsString] = result.rows[0].json_build_object;
    };
    res.send(result.rows[0].json_build_object);
  });
}
});

app.put('/reviews/:reviewId/:type', (req, res) => {
  console.log(req.params.reviewId,req.params.type);

  if (req.params.type === 'helpful') {
    let reviewsQuery = `  UPDATE reviews r
    SET helpfulness =helpfulness+ 1
    WHERE r.id=${req.params.reviewId}`;

    client.query(reviewsQuery, (err, result) => {
      if (err) {console.log(err)};
      res.send('help updated');
    });
  } else if (req.params.type === 'report') {
    let reviewsQuery = `  UPDATE reviews r SET reported=reported + 1
    WHERE r.id=${req.params.reviewId}`
    client.query(reviewsQuery, (err, result) => {
      if (err) {console.log(err)};

      res.send('report updated');
    });
  } else {
    res.send(500, 'NOT putted!');

  }
})

app.post('/reviews', (req, res) => {
  console.log(req.body);

  // body: "asd"
  // email: "asd@asd"
  // name: "asd"
  // photos: []
  // product_id: 44388
  // rating: 3
  // recommend: false
  // summary: "asd"
  let reviewsQuery = `INSERT INTO reviews(
    product_id,
    rating,
    date,
    summary,
    body,
    recommend,
    reported,
    reviewer_name,
    reviewer_email,
    response,
    helpfulness)
  VALUES ($1,
    $2,
    $3,
    $4,
    $5,
    $6,
    0,
    $7,
    $8,
    ${null},
    0);`;

  client.query(reviewsQuery,[req.body.product_id,req.body.rating,Math.round((new Date()).getTime() / 1000),req.body.summary,req.body.body,req.body.recommend,req.body.name,req.body.reviewer_email], (err, result) => {
    if (err) {console.log(err)};
  });
});
